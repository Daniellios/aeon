import { eachDayOfInterval, endOfWeek, eachWeekOfInterval } from "date-fns";
import moment from "moment";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import GhantDays from "../components/GhantDays";
import GhantProject from "../components/GhantProject";
import GhantWeeks from "../components/GhantWeeks";
import Header from "../components/Header";
import { checkDayLoad, getProjectSchedule } from "../helpers/ghantCreators";
import { getChartData } from "../store/service/getChartData";
import {
  selectData,
  setGhantDays,
  setGhantProjects,
  setGhantWeeks,
} from "../store/store";
import type {
  IChartTask,
  IGhantDay,
  IGhantProject,
  IGhantWeek,
} from "../utils/interfaces";

const Home: NextPage = () => {
  const dispatch = useDispatch();
  const { period, unfoldedChartItems } = useSelector(selectData);

  useEffect(() => {
    dispatch(getChartData());
    if (period) {
      getWeeksOfPeriod(period, unfoldedChartItems);
    }
  }, [unfoldedChartItems, period]);

  const getWeeksOfPeriod = (period: string, chartItems: IChartTask[]) => {
    // ОПРЕДЕЛЕНИЕ НАЧАЛЬНОЙ И КОНЕЧНОЙ ДАТЫ ВЫПОЛНЕНИЯ
    const startDate = moment(period.split("-")[0], "DD.MM.YYYY").toDate();
    const endDate = moment(period.split("-")[1], "DD.MM.YYYY").toDate();

    // КАЖДАЯ НЕДЕЛЯ ПЕРИОДА ВЫПОЛНЕНИЯ ПРОЕКТА
    const weeks = eachWeekOfInterval(
      { start: startDate, end: endDate },
      { weekStartsOn: 1 }
    );

    // Работы по проектам
    const projectDates: IGhantProject[] = getProjectSchedule(chartItems);

    // ДНИ каждой недели
    const weekDays: Date[] = [];

    // ДНИ НЕДЕЛИ
    const ghantWeeks: IGhantWeek[] = weeks.map(
      (weekStart: Date): IGhantWeek => {
        // КОНЕЦ НЕДЕЛИ
        const weekEnd: Date = endOfWeek(weekStart, {
          weekStartsOn: 1,
        });

        const newWeekInterval = eachDayOfInterval({
          start: weekStart,
          end: weekEnd,
        });
        weekDays.push(...newWeekInterval);

        const weekStartSplit = weekStart.toDateString().split(" ");
        const weekEndSplit = weekEnd.toDateString().split(" ");

        return {
          start: `${weekStartSplit[2]} ${weekStartSplit[1]}`,
          end: `${weekEndSplit[2]} ${weekEndSplit[1]}`,
        };
      }
    );

    // Все дни на диаграмме Ганта
    const ghantDays: IGhantDay[] = weekDays.map((day, idx) => {
      return checkDayLoad(day, idx, projectDates);
    });

    dispatch(setGhantWeeks(ghantWeeks));
    dispatch(setGhantDays(ghantDays));
    dispatch(setGhantProjects(projectDates));
  };

  return (
    <>
      <Head>
        <title>Gant Chart</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex w-full max-w-[1440px] flex-col items-center justify-center gap-3 bg-white p-[24px]">
        <Header></Header>
        <div className="fade flex w-full">
          {/* SIDE MENU */}
          <GhantProject></GhantProject>

          {/* GANT CHART */}
          <div className=" main_border  scrollbar flex h-[703px] w-[1023px] flex-col items-start overflow-hidden overflow-x-scroll border-[1px] border-x-0">
            {/* WEEKS */}
            <GhantWeeks></GhantWeeks>
            {/* DAYS */}
            <GhantDays></GhantDays>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
