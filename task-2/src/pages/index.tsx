import { eachDayOfInterval, endOfWeek, eachWeekOfInterval } from "date-fns";
import moment from "moment";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import GhantDays from "../components/GhantDays";
import GhantWeeks from "../components/GhantWeeks";
import Header from "../components/Header";
import levelColors from "../constants/levelColors";
import levelIcons from "../constants/levelIcons";
import UIVar from "../constants/uiVariables";
import { checkDayLoad, getProjectSchedule } from "../helpers/ghantCreators";
import { getChartData } from "../store/service/getChartData";
import {
  foldTask,
  selectData,
  setGhantDays,
  setGhantWeeks,
  unfoldTask,
} from "../store/store";
import type {
  IChartTask,
  IGhantDay,
  ITaskInfo,
  IGhantWeek,
} from "../utils/interfaces";

const Home: NextPage = () => {
  const dispatch = useDispatch();
  const { period, project, chartItems, isAnyFolded } = useSelector(selectData);

  const [projectList, setProjecList] = useState<ITaskInfo[]>();

  useEffect(() => {
    dispatch(getChartData());
    if (period) {
      getEachWeekOfInterval(period, chartItems);
    }
  }, [chartItems, period]);

  const getEachWeekOfInterval = (period: string, chartItems: IChartTask[]) => {
    // ОПРЕДЕЛЕНИЕ НАЧАЛЬНОЙ И КОНЕЧНОЙ ДАТЫ ВЫПОЛНЕНИЯ
    const startDate = moment(period.split("-")[0], "DD.MM.YYYY").toDate();
    const endDate = moment(period.split("-")[1], "DD.MM.YYYY").toDate();

    // КАЖДАЯ НЕДЕЛЯ ПЕРИОДА ВЫПОЛНЕНИЯ ПРОЕКТА
    const weeks = eachWeekOfInterval(
      { start: startDate, end: endDate },
      { weekStartsOn: 1 }
    );

    // Работы по проектам
    const projectDates: ITaskInfo[] = getProjectSchedule(chartItems);

    // ДНИ каждой недели
    const weekDays: Date[] = [];

    // ДНИ НЕДЕЛИ
    const ghantWeeks: IGhantWeek[] = weeks.map(
      (weekStart: Date): IGhantWeek => {
        // КОНЕЦ НЕДЕЛИ
        const weekEnd: Date = endOfWeek(weekStart, {
          weekStartsOn: 1,
        });

        const newWeekInterval = eachDayOfInterval({
          start: weekStart,
          end: weekEnd,
        });
        weekDays.push(...newWeekInterval);

        const weekStartSplit = weekStart.toDateString().split(" ");
        const weekEndSplit = weekEnd.toDateString().split(" ");

        return {
          start: `${weekStartSplit[2]} ${weekStartSplit[1]}`,
          end: `${weekEndSplit[2]} ${weekEndSplit[1]}`,
        };
      }
    );

    // Все дни на диаграмме Ганта
    const ghantDays: IGhantDay[] = [];

    weekDays.forEach((day, idx) => {
      ghantDays.push(checkDayLoad(day, idx, projectDates));
    });

    dispatch(setGhantWeeks(ghantWeeks));
    dispatch(setGhantDays(ghantDays));
    setProjecList(projectDates);
  };

  const handleFold = (foldLevel: number) => {
    dispatch(foldTask(foldLevel));
  };

  const handleUnFold = (foldLevel: number) => {
    dispatch(unfoldTask(foldLevel));
  };

  return (
    <>
      <Head>
        <title>Gant Chart</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex w-full max-w-[1440px] flex-col items-center justify-center gap-3 bg-white p-[24px]">
        <Header projectName={project} projectPeriod={period}></Header>
        <div className="fade flex w-full">
          {/* SIDE MENU */}
          <div className="main_border w-[390px] rounded-tl-lg rounded-bl-lg border-[1px]">
            <div className="flex h-[48px] items-center  bg-[#F7F8FC] py-[15px] pl-5 text-[14px] font-medium text-[#6D6E85]">
              Work Item
            </div>
            {/* TASK LIST */}
            <div className="relative mt-[39px] flex flex-col ">
              {projectList &&
                projectList.map((task, idx, arr) => (
                  <div
                    key={task.id}
                    className={task.isFolded ? "work_item folded" : "work_item"}
                  >
                    <div
                      className="flex items-center justify-start gap-2"
                      style={{
                        paddingLeft: `${UIVar.levelPadding * task.level}px`,
                      }}
                    >
                      {task.subTaskAmount ? (
                        <button
                          onClick={
                            isAnyFolded
                              ? () => handleUnFold(task.level)
                              : () => handleFold(task.level)
                          }
                          className={
                            arr[idx + 1]?.isFolded
                              ? "h-4  w-4 rotate-180 delay-75"
                              : " h-4 w-4 rotate-0"
                          }
                        >
                          <Image
                            src={"/arrow.svg"}
                            width={16}
                            height={16}
                            alt="arrow icon"
                          ></Image>
                        </button>
                      ) : (
                        <div></div>
                      )}

                      <span>
                        <Image
                          src={`/${levelIcons[task.level - 1]}`}
                          width={14}
                          height={14}
                          alt="project-icon"
                        ></Image>
                      </span>
                      <span className="text-[12px] italic  text-[#8B8C9E]">
                        {task.subTaskAmount ? task.subTaskAmount : 0}
                      </span>
                      <p className="text-[14px]"> {task.name} </p>
                    </div>
                  </div>
                ))}
            </div>
          </div>

          {/* GANT CHART */}
          <div className=" main_border flex h-[703px] w-[1023px] flex-col items-start overflow-hidden overflow-x-scroll border-[1px] border-x-0">
            {/* WEEKS */}
            <GhantWeeks></GhantWeeks>
            {/* DAYS */}
            <GhantDays></GhantDays>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
